/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatCommands(AStatCommands node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprCommands(AExprCommands node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoargFunction(ANoargFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgFunction(AArgFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOneArgument(AOneArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATwoArgument(ATwoArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThreeArgument(AThreeArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFourArgument(AFourArgument node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintsimpleStatement(APrintsimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintcomplexStatement(APrintcomplexStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABracketsStatement(ABracketsStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertsimpleStatement(AAssertsimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssertcomplexStatement(AAssertcomplexStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentExpression(AAssignmentExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdexpExpression(AIdexpExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdExpression(AIdExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALenExpression(ALenExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsciiExpression(AAsciiExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaxoneExpression(AMaxoneExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaxtwoExpression(AMaxtwoExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinoneExpression(AMinoneExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMintwoExpression(AMintwoExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisExpression(AParenthesisExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABracketsimpleExpression(ABracketsimpleExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABracketscomplexExpression(ABracketscomplexExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrAssignment(AOrAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqAssignment(AEqAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusassignAssignment(AMinusassignAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivassignAssignment(ADivassignAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndLogicalOr(ALogicalAndLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOrLogicalOr(ALogicalOrLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalNotLogicalAnd(ALogicalNotLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndLogicalAnd(ALogicalAndLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparisonLogicalNot(AComparisonLogicalNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalNotLogicalNot(ALogicalNotLogicalNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualsComparison(AEqualsComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotequalsComparison(ANotequalsComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessComparison(ALessComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreatComparison(AGreatComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreatoreqComparison(AGreatoreqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessoreqComparison(ALessoreqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInComparison(AInComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionTerm(AAdditionTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubtractionTerm(ASubtractionTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExponentionFactor(AExponentionFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicationFactor(AMultiplicationFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivisionFactor(ADivisionFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloFactor(AModuloFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueExponention(AValueExponention node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExponentionExponention(AExponentionExponention node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleImportOne(ASimpleImportOne node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComplexImportOne(AComplexImportOne node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleModule(ASimpleModule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComplexModule(AComplexModule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumbValue(ANumbValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParValue(AParValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDmult(TDmult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloordiv(TFloordiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotequals(TNotequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusassign(TPlusassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusassign(TMinusassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultassign(TMultassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivassign(TDivassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExclam(TExclam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDictt(TDictt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicPlus(TLogicPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGqmark(TGqmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElif(TElif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessoreq(TLessoreq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreatoreq(TGreatoreq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSquote(TSquote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDquote(TDquote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAscii(TAscii node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
