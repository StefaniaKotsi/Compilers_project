Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	space = ' ';
	period = '.';
	underscore = '_';

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	floordiv = '//';
	mod = '%';
	eq = '=';
	equals = '==';
	notequals = '!=';
	plusassign = '+=';
	minusassign = '-=';
	multassign = '*=';
	divassign = '/=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '['; 
	r_br = ']';
	dot = period;
	comma=',';
	qmark = '?';
	gqmark = ';';
	and = 'and';
	or = 'or';
	not = 'not';
	if = 'if';
	elif = 'elif';
	else = 'else';
	for = 'for';
	while = 'while';
	print = 'print';
	return = 'return';
	continue = 'continue';
	break = 'break';
	in = 'in';
	less = '<';
	great = '>';
	lessoreq = '>=';
	greatoreq = '<=';
	true = 'True';
	semi = ':';
	false = 'False';
	none =  'None';
	squote = ''';
	dquote = '"';
	as = 'as';
	assert = 'assert';
	from = 'from';
	import = 'import';
	ascii = 'ascii';
	len = 'len';
	max = 'max';
	min = 'min';
	blank = (space | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ period digit+);
	id = underscore* letter (letter | digit | underscore)*;
	string = '"'not_eol* '"' | '''not_eol* ''';


Ignored Tokens
	blank, line_comment;

Productions
	programme = commands*;
	
	commands ={stat} function|
				 {expr} statement;

	function = def id l_par r_par semi statement ;
					
	expression = {assignment} assignment |
					{idexp} id l_br expression r_br |
					{len} len l_par expression r_par |
					{ascii} ascii l_par expression |
					{maxtwo} max l_par [lpar]:value comma [rpar]:value r_par |
					{mintwo} min l_par [lpar]:value comma [rpar]:value r_par |
					{parenthesis} l_par expression r_par |
					{bracketsimple} l_br value r_br |
					{value} value |
					{id} id |
					{import} tab import;

	statement = {if} tab if comparison semi statement |
				  {while} tab while comparison semi statement |
				  {for} tab for [lpar]:id in [rpar]:id semi statement |
				  {return} tab return assignment |
				  {printsimple} tab print assignment |
				  {assign} tab assignment ;

	exponention = {value} value |
					{exponention}exponention dmult value;

	factor = {exponention} exponention |
				{multiplication} factor mult exponention |
				{division} factor div exponention |
				{modulo} factor mod exponention;

	term = {factor} factor |
				{addition} term plus factor |
				{subtraction} term minus factor;

	comparison = {equals} comparison equals term |
					{notequals} comparison notequals term |
					{less} comparison less term |
					{great}comparison great term |
					{greatoreq} comparison greatoreq term |
					{lessoreq} comparison lessoreq term |
					{in} comparison in term |
					{true} true |
					{false} false;

	logical_not = {comparison} comparison |
					{logical_not} not comparison;

	logical_and = {logical_not}logical_not |
					{logical_and}logical_and and logical_not;
	
	logical_or = {logical_and}logical_and |
					{logical_or}logical_or or logical_and;

	assignment = {or} logical_or |
					{eq} assignment eq logical_or |
					{minusassign} assignment minusassign logical_or |
					{divassign}assignment divassign logical_or;

	import_sth = {simple} import module;
					

	module = {simple} id;

	value ={identifier} id |
				  {numb} number |
				  {par} l_par assignment r_par;

