/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseAStatCommands(AStatCommands node);
    void caseAExprCommands(AExprCommands node);
    void caseANoargFunction(ANoargFunction node);
    void caseAArgFunction(AArgFunction node);
    void caseAOneArgument(AOneArgument node);
    void caseATwoArgument(ATwoArgument node);
    void caseAThreeArgument(AThreeArgument node);
    void caseAFourArgument(AFourArgument node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintsimpleStatement(APrintsimpleStatement node);
    void caseAPrintcomplexStatement(APrintcomplexStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseABracketsStatement(ABracketsStatement node);
    void caseAAssertsimpleStatement(AAssertsimpleStatement node);
    void caseAAssertcomplexStatement(AAssertcomplexStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseAAssignmentExpression(AAssignmentExpression node);
    void caseAIdexpExpression(AIdexpExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseALenExpression(ALenExpression node);
    void caseAAsciiExpression(AAsciiExpression node);
    void caseAMaxoneExpression(AMaxoneExpression node);
    void caseAMaxtwoExpression(AMaxtwoExpression node);
    void caseAMinoneExpression(AMinoneExpression node);
    void caseAMintwoExpression(AMintwoExpression node);
    void caseAParenthesisExpression(AParenthesisExpression node);
    void caseABracketsimpleExpression(ABracketsimpleExpression node);
    void caseABracketscomplexExpression(ABracketscomplexExpression node);
    void caseAOrAssignment(AOrAssignment node);
    void caseAEqAssignment(AEqAssignment node);
    void caseAMinusassignAssignment(AMinusassignAssignment node);
    void caseADivassignAssignment(ADivassignAssignment node);
    void caseALogicalAndLogicalOr(ALogicalAndLogicalOr node);
    void caseALogicalOrLogicalOr(ALogicalOrLogicalOr node);
    void caseALogicalNotLogicalAnd(ALogicalNotLogicalAnd node);
    void caseALogicalAndLogicalAnd(ALogicalAndLogicalAnd node);
    void caseAComparisonLogicalNot(AComparisonLogicalNot node);
    void caseALogicalNotLogicalNot(ALogicalNotLogicalNot node);
    void caseAEqualsComparison(AEqualsComparison node);
    void caseANotequalsComparison(ANotequalsComparison node);
    void caseALessComparison(ALessComparison node);
    void caseAGreatComparison(AGreatComparison node);
    void caseAGreatoreqComparison(AGreatoreqComparison node);
    void caseALessoreqComparison(ALessoreqComparison node);
    void caseAInComparison(AInComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAAdditionTerm(AAdditionTerm node);
    void caseASubtractionTerm(ASubtractionTerm node);
    void caseAExponentionFactor(AExponentionFactor node);
    void caseAMultiplicationFactor(AMultiplicationFactor node);
    void caseADivisionFactor(ADivisionFactor node);
    void caseAModuloFactor(AModuloFactor node);
    void caseAValueExponention(AValueExponention node);
    void caseAExponentionExponention(AExponentionExponention node);
    void caseASimpleImportOne(ASimpleImportOne node);
    void caseAComplexImportOne(AComplexImportOne node);
    void caseASimpleModule(ASimpleModule node);
    void caseAComplexModule(AComplexModule node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseANumbValue(ANumbValue node);
    void caseAParValue(AParValue node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTFloordiv(TFloordiv node);
    void caseTMod(TMod node);
    void caseTEq(TEq node);
    void caseTEquals(TEquals node);
    void caseTNotequals(TNotequals node);
    void caseTPlusassign(TPlusassign node);
    void caseTMinusassign(TMinusassign node);
    void caseTMultassign(TMultassign node);
    void caseTDivassign(TDivassign node);
    void caseTExclam(TExclam node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTGqmark(TGqmark node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTIf(TIf node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTFor(TFor node);
    void caseTWhile(TWhile node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTContinue(TContinue node);
    void caseTBreak(TBreak node);
    void caseTIn(TIn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTLessoreq(TLessoreq node);
    void caseTGreatoreq(TGreatoreq node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTNone(TNone node);
    void caseTSquote(TSquote node);
    void caseTDquote(TDquote node);
    void caseTAs(TAs node);
    void caseTAssert(TAssert node);
    void caseTFrom(TFrom node);
    void caseTImport(TImport node);
    void caseTAscii(TAscii node);
    void caseTLen(TLen node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
